sc:
  datasource:
    mysql:
      ip: 192.168.237.129:3306
      username: admin_2023
      password: adminDK_@2023
      db: demo
  env: dev
  nacos:
    server-addr: 192.168.237.129:8848
    namespace: fde895c3-8a36-45ba-af5e-bd7bb32ddc44
    group: SC_GROUP_C
  redis:
    host: 192.168.237.129
    port: 6379
    database: 5
    password: admin55670@redis
  rabbitmq:
    addresses: 127.0.0.1
    port: 5672
    username: qxx
    password: qxx
    #连接到代理时用的虚拟主机
    virtual-host: /
    # 生产者|消费者分组（保持一致）
    group: msg-group
spring:
  cloud:
    nacos:
      config:
        server-addr: ${sc.nacos.server-addr}
        group: ${sc.nacos.group}
        namespace: ${sc.nacos.namespace}
        prefix: rabbit-demo-config
        file-extension: yaml
        shared-configs:
          - dataId: application.yaml
            group: SC_GROUP_C
            refresh: true
          - dataId: mq.yaml
            group: SC_GROUP_C
            refresh: true
      discovery:
        server-addr: ${sc.nacos.server-addr}
        group: ${sc.nacos.group}
        namespace: ${sc.nacos.namespace}
    listener:
      type: simple
      simple:
        #设置消费方确认模式，这里的auto与rabbitmq的自动确认不是一回事
        #auto：消费者根据程序执行正常或者抛出异常来决定是提交ack或者nack(auto意味着容器会自动应答，除非MessageListener抛出异常，这是默认配置方式。)
        #manual: 手动ack，用户必须手动提交ack或者nack
        #none: 没有ack机制
        acknowledge-mode: manual
        #当retry被禁用或republishToDlq为false时，传递失败是否应该重新排队
        #决定被拒绝的消息是否重新入队；默认是true
        #与参数acknowledge-mode有关系，当且仅当消费方模式为auto,且未开启重试机制时生效
        #       acknowledge-mode:auto
        #       spring.rabbitmq.listener.simple.retry.enabled=false
        #被拒绝的消息是否重新入队；默认是true->重新入队  false->不入队（不想丢弃需要死信队列）
        default-requeue-rejected: true
        retry:
          #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
          enabled: true
          #最大重试次数 达到上线后仍失败之后就会移除该消息
          max-attempts: 5
          #重试初始间隔时间ms
          initial-interval: 1000
          #重试最大间隔时间ms
          max-interval: 30000
          #间隔时间乘子  间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间
          multiplier: 1
    publisher-confirm-type: correlated # 发布消息成功到交换器后会触发回调方法
    publisher-returns: true #回退配置
