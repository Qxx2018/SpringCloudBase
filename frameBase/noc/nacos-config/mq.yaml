spring:
  rabbitmq:
    addresses: ${sc.rabbitmq.addresses}
    port: ${sc.rabbitmq.port}
    username: ${sc.rabbitmq.username}
    password: ${sc.rabbitmq.password}
    #连接到代理时用的虚拟主机
    virtual-host: ${sc.rabbitmq.virtual-host}
    #是否启用发布确认
    publisher-returns: false
    #异步回调
    publisher-confirm-type: correlated
    #心跳时间 s
    requested-heartbeat: 60
    #连接超时 ms 队列属性设置 与 消息进行单独设置 => 以两者之间TTL较小的那个数值为准
    connection-timeout: 300000
    #Template
    template:
      #启用强制信息
      mandatory: true
    #linstener
    listener:
      type: simple
      simple:
        #是否启动时自动启动容器
        #auto-startup: true
        #手动设置ack
        #auto：消费者根据程序执行正常或者抛出异常来决定是提交ack或者nack(auto意味着容器会自动应答，除非MessageListener抛出异常，这是默认配置方式。)
        #manual: 手动ack，用户必须手动提交ack或者nack
        #none: 没有ack机制
        acknowledge-mode: manual
        concurrency: 3 #消费者最小数量
        max-concurrency: 10 # 消费者最大数量
        prefetch: 1 #一个消费者最多可处理的nack消息（消费者拒绝或处理异常的无法处理的消息）数量，如果有事务的话，必须大于等于transaction数量.
        # 重试后是否重新入队；默认是true->重新入队  false->不入队（不想丢弃需要死信队列）
        default-requeue-rejected: false
        retry:
          #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
          enabled: true
          #重试五次 重试4次失败之后就会移除该消息
          max-attempts: 5
          #重试初始间隔时间ms
          initial-interval: 3000
          #重试最大间隔时间ms
          #max-interval: 10000
          #间隔时间乘子  间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间
          #multiplier: 2
  cloud:
    stream:
      binders:
        myRabbit: # 表示定义的名称，用于于binding整合
          type: rabbit #消息组件类型
          inheritEnvironment: true #配置是否继承应用程序本身的环境
          defaultCandidate: true
          environment: #表示定义的名称，用于于binding整合
            spring:
              rabbitmq:
                host: ${sc.rabbitmq.addresses}
                port: ${sc.rabbitmq.port}
                username: ${sc.rabbitmq.username}
                password: ${sc.rabbitmq.password}
                virtual-host: ${sc.rabbitmq.virtual-host}
      bindings:
        msg-channel-output: #输出通道的名称
          destination: a-exchange #输出通道绑定到a-exchange交换机
          group: ${sc.rabbitmq.group} #分组名称，生产端和消费端需要一致
          contentType: application/json # 内容格式
          default-binder: myRabbit # 设置要绑定的消息服务的具体设置
        msg-channel-input: #输入通道名称
          destination: a-exchange
          group: ${sc.rabbitmq.group}
          ontentType: application/json
          default-binder: myRabbit
          consumer:
            #retryTemplateName: #编码方式配置
            # 最多尝试处理几次，默认3 ；填写1关闭重试
            maxAttempts: 5
            # 重试时初始避退间隔，单位毫秒，默认1000
            backOffInitialInterval: 1000
            # 重试时最大避退间隔，单位毫秒，默认10000
            backOffMaxInterval: 10000
            # 避退乘数，默认2.0
            backOffMultiplier: 2.0
            # 当listen抛出retryableExceptions未列出的异常时，是否要重试
            defaultRetryable: true
            # 异常是否允许重试的map映射
            retryableExceptions:
              java.lang.RuntimeException: true
              java.lang.IllegalStateException: false
      rabbit:
        bindings:
          msg-channel-output:
            producer:
              declareExchange: true #对于通道终点是否声明交换机
              exchangeAutoDelete: false #交换机是否自动删除
              exchangeDurable: true #交换机持久化
              exchangeType: topic #交换机类型
              bindQueue: true #是否声明队列并绑定到目的地交换机
              bindingRoutingKey: a-key #用于将队列绑定到交换机的路由键
              declareDlx: true #声明死信交换机
              deadLetterExchange: a-dead-exchange #死信交换机名称
              deadLetterExchangeType: topic #死信交换机类型
              deadLetterRoutingKey: a-dead-key #队列的DLX路由key
              autoBindDlq: true #绑定死信队列
              deadLetterQueueName: a-dead-queue.${sc.rabbitmq.group} #死信队列名称
              dlqDeadLetterExchange: a-dead-exchange #如果DLQ被声明，则将DLX分配给该队列 如果该列声明，那么deadLetterExchange也要声明，这个保持一致
              dlqDeadLetterRoutingKey: a-dead-key #如果DLQ被声明，则会将一个死信路由密钥分配给该队列
              ttl: 60000 #对列生存时间ms
              transacted: true #启动事务
          msg-channel-input:
            consumer:
              acknowledgeMode: MANUAL # 应答模式NONE/MANUAL/AUTO
              declareExchange: true #对于通道终点是否声明交换机
              exchangeAutoDelete: false #交换机是否自动删除
              exchangeDurable: true #交换机持久化
              exchangeType: topic #交换机类型
              bindQueue: true #是否声明队列并绑定到目的地交换机
              bindingRoutingKey: a-key #用于将队列绑定到交换机的路由键
              declareDlx: true #声明死信交换机
              deadLetterExchange: a-dead-exchange #死信交换机名称
              deadLetterExchangeType: topic #死信交换机类型
              deadLetterRoutingKey: a-dead-key #队列的DLX路由key
              autoBindDlq: true #绑定死信队列
              deadLetterQueueName: a-dead-queue.${sc.rabbitmq.group} #死信队列名称
              dlqDeadLetterExchange: a-dead-exchange #如果DLQ被声明，则将DLX分配给该队列 如果该列声明，那么deadLetterExchange也要声明，这个保持一致
              dlqDeadLetterRoutingKey: a-dead-key #如果DLQ被声明，则会将一个死信路由密钥分配给该队列
              republishToDlq: true # 默认false 该值为false如果设置了死信队列，消息对原封不动的发送到死信队列，如果为true，则消息对带上错误信息发送至死信队列
              requeueRejected: true # 默认false 当retry被禁用或republishToDlq为false时，传递失败是否应该重新排队。
              ttl: 60000 #对列生存时间ms
              transacted: true #启动事务