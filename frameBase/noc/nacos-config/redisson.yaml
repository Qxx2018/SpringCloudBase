sc:
  redisson:
    singleServerConfig:
      # 如果当前连接池里的连接数量超过了最小空闲连接数，
      # 而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。
      # 时间单位是毫秒。
      idleConnectionTimeout: 10000
      # 同节点建立连接时的等待超时。时间单位是毫秒。
      connectTimeout: 10000
      # 等待节点回复命令的时间。该时间从命令发送成功时开始计时。
      timeout: 3000
      # 命令失败重试次数
      retryAttempts: 3
      # 命令重试发送时间间隔，单位：毫秒
      retryInterval: 1500
      # 节点密码
      password: ${sc.redis.password}
      # 单个连接最大订阅数量
      subscriptionsPerConnection: 5
      # 在Redis节点里显示的客户端名称。
      clientName: ${spring.application.name}
      # 节点地址
      address: redis://${sc.redis.host}:${sc.redis.port}
      # 发布和订阅连接的最小空闲连接数
      # 用于发布和订阅连接的最小保持连接数（长连接）。
      # Redisson内部经常通过发布和订阅来实现许多功能。长期保持一定数量的发布订阅连接是必须的。
      subscriptionConnectionMinimumIdleSize: 1
      # 发布和订阅连接池大小 用于发布和订阅连接的连接池最大容量。连接池的连接数量自动弹性伸缩。
      subscriptionConnectionPoolSize: 50
      # 最小空闲连接数 最小保持连接数（长连接）。长期保持一定数量的连接有利于提高瞬时写入反应速度。
      connectionMinimumIdleSize: 32
      # 连接池大小 在启用该功能以后，Redisson将会监测DNS的变化情况。
      connectionPoolSize: 64
      # 数据库编号
      database: ${sc.redis.database}
      # DNS监测时间间隔，单位：毫秒
      dnsMonitoringInterval: 5000
    # 线程池数量 默认值: 当前处理核数量 * 2
    threads: 0
    # Netty线程池数量 默认值: 当前处理核数量 * 2
    nettyThreads: 0
    # Redisson的对象编码类是用于将对象进行序列化和反序列化，以实现对该对象在Redis里的读取和存储
    codec:
      clazz: org.redisson.codec.JsonJacksonCodec
    # 传输模式
    transportMode: NIO
